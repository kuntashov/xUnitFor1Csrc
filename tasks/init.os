

#Использовать v8runner
#Использовать cmdline
#Использовать logos
#Использовать 1commands

Перем ВозможныеКоманды;
Перем Лог;
Перем ЭтоWindows;

Процедура ИнициализацияОкружения()

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(ВРег(СистемнаяИнформация.ВерсияОС), "WINDOWS") > 0;

	Лог = Логирование.ПолучитьЛог("oscript.app.vanessa-init");
	Лог.УстановитьРаскладку(ЭтотОбъект);
	УровеньЛога = УровниЛога.Информация;
	РежимРаботы = ПолучитьПеременнуюСреды("RUNNER_ENV");
	Если ЗначениеЗаполнено(РежимРаботы) И РежимРаботы = "debug" Тогда
		УровеньЛога = УровниЛога.Отладка;
	КонецЕсли;
	
	Лог.УстановитьУровень(УровеньЛога);

	ВозможныеКоманды = Новый Структура("file, server", "file", "server");
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	Лог1 = Логирование.ПолучитьЛог("oscript.lib.cmdline");
	Лог1.УстановитьУровень(УровеньЛога);
	
	Парсер.ДобавитьИменованныйПараметр("--v8version", "Версия платформы", Истина);
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды.file);
	Парсер.ДобавитьКоманду(ОписаниеКоманды);

	ОписаниеКоманды1 = Парсер.ОписаниеКоманды(ВозможныеКоманды.server);
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--srvr", "Сервер 1С" );
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--srvrport", "Порт сервера 1С" );
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--srvrproto", "Протокол, TCP" );
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--ref", "Имя базы на сервере 1C" );
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--dbms", "Тип базы данных [MSSQLServer, PostgreSQL, IBMDB2, OracleDatabase]" );
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--dbsrvr", "Сервера SQL" );
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--dbname", "Имя базы на сервере SQL, по умолчанию равно --ref" );
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--dbuid", "Имя пользователя базы данных");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--dbpwd", "Пароль пользователя");
	// SQLYOffs - нафиг этот прошлый век, такой параметр неправильным даже поддерживать не будем. 
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--locale", "язык (страна)");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--crsqldb", "создать базу в случаии ее ее отсутствия [Y|N], по умолчанию Y");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--schjobdn", "апретить выполнение регламентных созданий (Y/N). Значение по умолчанию — Y");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--susr", "имя администратора кластера");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--spwd", "пароль администратора кластера");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--licdstr", "разрешить получение клиентских лицензий через сервер Y|N, default Y");
	//LicDstr
	//Zn
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--zn", "Разделители. ");
	Парсер.ДобавитьКоманду(ОписаниеКоманды1);

	Аргументы = Парсер.РазобратьКоманду(АргументыКоманднойСтроки);

	Если Аргументы = Неопределено Тогда
		Аргументы = Новый Структура("Команда, ЗначенияПараметров", "file", Новый Соответствие);
	КонецЕсли;


	Лог.Информация("Создание сервисной базы init.os init-dev --dev --ibname /F./fixtures/cf/83");
	
	Команда = Новый Команда;
	Команда.УстановитьПравильныйКодВозврата(0);
	
	ВерсияПлатформы = 	?(Аргументы.ЗначенияПараметров["--v8version"] = Неопределено, 
						"8.3.10",
						Аргументы.ЗначенияПараметров["--v8version"]
						);
	СтрокаПодключения = "";
	КопироватьФайл("./tools/env.json.file", "./env.json");
	Лог.Информация("Запуск "+Аргументы.Команда);
	Если Аргументы.Команда = ВозможныеКоманды.file Тогда
		Лог.Информация("Скопировали env.json.file в env.json" );
		Лог.Информация("Создание основной базы init.os init-dev");
		СтрокаПодключения = "/F./build/ib";
		ЗаписатьВНастройкиПараметры(СтрокаПодключения, ВерсияПлатформы);
		Команда.УстановитьСтрокуЗапуска("runner init-dev");
		Команда.Исполнить();
	ИначеЕсли Аргументы.Команда = ВозможныеКоманды.server Тогда
		Лог.Информация("Создание основной базы сервер");
		ЗапуститьСозданиеСервернойБазы(Аргументы.ЗначенияПараметров);
		СтрокаПодключения = СтрШаблон("/S%1:%2/%3", Аргументы.ЗначенияПараметров["--srvr"], 
									Строка(Аргументы.ЗначенияПараметров["--srvrport"]),
									Строка(Аргументы.ЗначенияПараметров["--ref"]));
		ЗаписатьВНастройкиПараметры(СтрокаПодключения, ВерсияПлатформы);
		СтрокаВыполнения = "runner init-dev --ibconnection " + СтрокаПодключения;
		Лог.Информация(СтрокаВыполнения);
		Команда.УстановитьСтрокуЗапуска(СтрокаВыполнения);
		Команда.Исполнить();
	КонецЕсли;

	СтрокаВыполнения = "runner init-dev --dev --src ./fixtures/cf/83 --ibconnection /F./build/ibservice --nocacheuse";
	Лог.Информация(СтрокаВыполнения);
	Команда.УстановитьСтрокуЗапуска(СтрокаВыполнения);
	Команда.Исполнить();


	Если НЕ Новый Файл("./build/1Cv8.cf").Существует() Тогда
		Лог.Информация("runner.os compile");
		Команда.УстановитьСтрокуЗапуска("runner-old compile");
		Команда.Исполнить();
	Иначе
		Лог.Информация("./build/1Cv8.cf существует, пропускаем компиляцию");
	КонецЕсли;

	Лог.Информация("deployka loadcfg " + СтрокаПодключения);
	СтрокаЗапуска = "deployka loadcfg " + СтрокаПодключения + " ./build/ /mode -load"+ " -v8version " + ВерсияПлатформы;
	Лог.Информация(СтрокаЗапуска);
	Команда.УстановитьСтрокуЗапуска(СтрокаЗапуска);
	Команда.Исполнить();

	СтрокаЗапуска = "deployka loadcfg /F./build/ibservice ./build/ /mode -load" + " -v8version " + ВерсияПлатформы;
	Лог.Информация(СтрокаЗапуска);
	Команда.УстановитьСтрокуЗапуска(СтрокаЗапуска);
	Команда.Исполнить();

	УстановитьПеременнуюСреды("RUNNER_DBUSER", " ");
	УстановитьПеременнуюСреды("RUNNER_DBPWD", " ");

	Лог.Информация("oscript runner.os updatedb");
	СтрокаЗапуска = "runner updatedb --uccode test";
	Лог.Информация(СтрокаЗапуска);
	Результат = ЗапуститьИПодождать(СтрокаЗапуска);
	Если Результат.КодВозврата <> 0 Тогда 
		Лог.Ошибка("Код возврат "+Результат.КодВозврата);
		ВызватьИсключение "Неверный код возврата "+ Результат.КодВозврата;
	КонецЕсли;

	СоздатьКаталог("./build/Plugins");
	СоздатьКаталог("./build/PluginsTemplates");
	СоздатьКаталог("./build/Tests");
	СоздатьКаталог("./build/Utils");
	СоздатьКаталог("./build/fixtures/core");
		
	СтрокаЗапуска = "opm run cepf";
	Лог.Информация(СтрокаЗапуска);
	ЗапуститьИПодождать(СтрокаЗапуска);
	
	Лог.Информация("ВСЕ!");
КонецПроцедуры

Процедура ЗаписатьВНастройкиПараметры(СтрокаПодключения, ВерсияПлатформы)
	
	Чтение = Новый ЧтениеТекста("./env.json");
	JsonСтрока  = Чтение.Прочитать();
	Чтение.Закрыть();
	Чтение = Неопределено;
	ПарсерJSON  = Новый ПарсерJSON();
	Результат   = ПарсерJSON.ПрочитатьJSON(JsonСтрока);
	Если Результат.Получить("default") <> Неопределено Тогда
		//Результат["default"]
		Результат["default"].Вставить("--ibconnection", СтрокаПодключения );
		Результат["default"].Вставить("--v8version", ВерсияПлатформы );
		
		JsonСтрока = ПарсерJSON.ЗаписатьJSON(Результат);
		Запись = Новый ЗаписьТекста;
		Запись.Открыть("./env.json");
		Запись.Записать(JsonСтрока);
		Запись.Закрыть();
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗапуститьСозданиеСервернойБазы(Параметры)
		Команда = Новый Команда;

		СИ = Новый СистемнаяИнформация;
		СоответствиеПеременных = Новый Соответствие();
		СоответствиеПеременных.Вставить("RUNNER_srvr", "--srvr");
		СоответствиеПеременных.Вставить("RUNNER_srvrport", "--srvrport");
		СоответствиеПеременных.Вставить("RUNNER_srvrproto", "--srvrproto");
		СоответствиеПеременных.Вставить("RUNNER_ref", "--ref");
		СоответствиеПеременных.Вставить("RUNNER_dbms", "--dbms");
		СоответствиеПеременных.Вставить("RUNNER_dbsrvr", "--dbsrvr");
		СоответствиеПеременных.Вставить("RUNNER_dbname", "--dbname");
		СоответствиеПеременных.Вставить("RUNNER_dbuid", "--dbuid");
		СоответствиеПеременных.Вставить("RUNNER_dbpwd", "--dbpwd");
		СоответствиеПеременных.Вставить("RUNNER_locale", "--locale");
		СоответствиеПеременных.Вставить("RUNNER_crsqldb", "--crsqldb");
		СоответствиеПеременных.Вставить("RUNNER_schjobdn", "--schjobdn");
		СоответствиеПеременных.Вставить("RUNNER_susr", "--susr");
		СоответствиеПеременных.Вставить("RUNNER_spwd", "--spwd");
		СоответствиеПеременных.Вставить("RUNNER_licdstr", "--licdstr");
		СоответствиеПеременных.Вставить("RUNNER_zn", "--zn");
		
		ПодключитьСценарий(ОбъединитьПути(ТекущийСценарий().Каталог, "..", "tools", "runner.os"), "runner");
		runner = Новый runner();
		runner.ДополнитьАргументыИзПеременныхОкружения(Параметры, СоответствиеПеременных);

		Параметры["--srvrport"] = ЗначениеПоУмолчанию(Параметры["--srvrport"], Строка(1541));
		Параметры["--srvrproto"] = ЗначениеПоУмолчанию(Параметры["--srvrproto"], "tcp://");
		Параметры["--dbms"] = ЗначениеПоУмолчанию(Параметры["--dbms"], "PostgreSQL");
		Параметры["--locale"] = ЗначениеПоУмолчанию(Параметры["--locale"], "ru");
		Параметры["--dbname"] = ЗначениеПоУмолчанию(Параметры["--dbname"], Параметры["--ref"]);
		Параметры["--crsqldb"] = ЗначениеПоУмолчанию(Параметры["--crsqldb"], "Y");
		Параметры["--licdstr"] = ЗначениеПоУмолчанию(Параметры["--licdstr"], "Y");
		Параметры["--schjobdn"] = ЗначениеПоУмолчанию(Параметры["--schjobdn"], "N");

		Параметры["--srvr"] = ?(
			ЗначениеЗаполнено(ПолучитьПеременнуюСреды("SERVERONEC")),
			ПолучитьПеременнуюСреды("SERVERONEC"),
			Параметры["--srvr"]);
		Параметры["--ref"] = ?(
			ЗначениеЗаполнено(ПолучитьПеременнуюСреды("SERVERBASE")),
			ПолучитьПеременнуюСреды("SERVERBASE"),
			Параметры["--ref"]);
		Параметры["--ref"] = ?(
			ЗначениеЗаполнено(ПолучитьПеременнуюСреды("SERVERBASE")),
			ПолучитьПеременнуюСреды("SERVERBASE"),
			Параметры["--ref"]);
		Параметры["--dbsrvr"] = ?(
			ЗначениеЗаполнено(ПолучитьПеременнуюСреды("SERVERPOSTGRES")),
			ПолучитьПеременнуюСреды("SERVERPOSTGRES"),
			Параметры["--dbsrvr"]);
		
		Параметры["--dbuid"] = ?(
			ЗначениеЗаполнено(ПолучитьПеременнуюСреды("SERVERPOSTGRESUSER")),
			ПолучитьПеременнуюСреды("SERVERPOSTGRESUSER"),
			Параметры["--dbuid"]);
		
		Параметры["--dbpwd"] = ?(
			ЗначениеЗаполнено(ПолучитьПеременнуюСреды("SERVERPOSTGRESPASSWD")),
			ПолучитьПеременнуюСреды("SERVERPOSTGRESPASSWD"),
			Параметры["--dbpwd"]);

		Параметры["--srvr"] = ЗначениеПоУмолчанию(Параметры["--srvr"], "serveronec.service.consul");
		Параметры["--srvr"] = ЗначениеПоУмолчанию(Параметры["--srvr"], "dev");
		Параметры["--dbsrvr"] = ЗначениеПоУмолчанию(Параметры["--dbsrvr"], "postgres");
		Параметры["--dbuid"] = ЗначениеПоУмолчанию(Параметры["--dbuid"], "postgres");
		Параметры["--dbpwd"] = ЗначениеПоУмолчанию(Параметры["--dbpwd"], "postgres");

		СтрокаПодключенияСервера = "" + Параметры["--srvrproto"] + Параметры["--srvr"] + ":" + Строка(Параметры["--srvrport"]);
		СтрокаСозданияБазы = "";
		
		СтрокаСозданияБазы = СтрШаблон("Srvr=%1;Ref=%2", 
				СтрокаПодключенияСервера,
				Параметры["--ref"]
				);
		СтрокаСозданияБазы = СтрШаблон("%1;DBMS=%2", 
				СтрокаСозданияБазы, 
				Параметры["--dbms"]
			);
		СтрокаСозданияБазы = СтрШаблон("%1;DBSrvr=%2;DB=%3",
			СтрокаСозданияБазы,
			Параметры["--dbsrvr"],
			Параметры["--dbname"]);
	
		Если ЗначениеЗаполнено(Параметры["--dbuid"]) Тогда 
			СтрокаСозданияБазы = СтрШаблон("%1;DBUID=%2", СтрокаСозданияБазы, Параметры["--dbuid"]);
			Если ЗначениеЗаполнено(Параметры["--dbpwd"]) Тогда
				СтрокаСозданияБазы = СтрШаблон("%1;DBPwd=%2", СтрокаСозданияБазы, Параметры["--dbpwd"]);
			КонецЕсли;
		КонецЕсли;

		Если Параметры["--dbms"] = "MSSQLServer" Тогда
			СтрокаСозданияБазы = СтрШаблон("%1;SQLYOffs=%2", СтрокаСозданияБазы, "2000");
		КонецЕсли;

		СтрокаСозданияБазы = СтрШаблон("%1;Locale=%2", СтрокаСозданияБазы, Параметры["--locale"]);
		СтрокаСозданияБазы = СтрШаблон("%1;CrSQLDB=Y", СтрокаСозданияБазы);
		СтрокаСозданияБазы = СтрШаблон("%1;SchJobDn=%2", СтрокаСозданияБазы, Параметры["--schjobdn"]);
		Если ЗначениеЗаполнено(Параметры["--susr"]) Тогда 
			СтрокаСозданияБазы = СтрШаблон("%1;SUsr=%2", СтрокаСозданияБазы, Параметры["--susr"]);
			Если ЗначениеЗаполнено(Параметры["--spwd"]) Тогда
				СтрокаСозданияБазы = СтрШаблон("%1;SPwd=%2", СтрокаСозданияБазы, Параметры["--spwd"]);
			КонецЕсли;
		КонецЕсли;

		Аргументы = Новый Структура();
		Аргументы.Вставить("Команда", "server");
		Аргументы.Вставить("ЗначенияПараметров", Параметры);
		runner.ОпределитьПараметрыРаботы(Аргументы);

		Конфигуратор = Новый УправлениеКонфигуратором();
		//Логирование.ПолучитьЛог("oscript.lib.v8runner").УстановитьУровень(Лог.Уровень());

		ВерсияПлатформы = Аргументы.ЗначенияПараметров["--v8version"];
		Если ЗначениеЗаполнено(ВерсияПлатформы) Тогда
			Лог.Отладка("ИнициализацироватьБазуДанных ВерсияПлатформы:"+ВерсияПлатформы);
			Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
		КонецЕсли;

		ПараметрыЗапуска = Новый Массив;
		ПараметрыЗапуска.Добавить("CREATEINFOBASE");
		
		//Лог.Отладка(СтрокаСозданияБазы);
		Если НЕ ЭтоWindows Тогда
			СтрокаСозданияБазы = """"+СтрокаСозданияБазы+"""";
			СтрокаСозданияБазы = СтрЗаменить(СтрокаСозданияБазы, """", "\""");
			СтрокаСозданияБазы = СтрЗаменить(СтрокаСозданияБазы,  ";", "\;");
		КонецЕсли;
		Лог.Отладка(СтрокаСозданияБазы);

		ПараметрыЗапуска.Добавить(СтрокаСозданияБазы);
		ПараметрыЗапуска.Добавить("/L"+Параметры["--locale"]);
		ПараметрыЗапуска.Добавить("/Out""" +Конфигуратор.ФайлИнформации() + """");

		СтрокаЗапуска = "";
		СтрокаДляЛога = "";
		Для Каждого Параметр Из ПараметрыЗапуска Цикл
			СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
		КонецЦикла;

		Приложение = "";
		Приложение = Конфигуратор.ПутьКПлатформе1С();
		Если Найти(Приложение, " ") > 0 Тогда 
			Приложение = runner.ОбернутьПутьВКавычки(Приложение);
		КонецЕсли;
		СтрокаЗапуска = Приложение + " "+СтрокаЗапуска;
		Сообщить(СтрокаЗапуска);
		
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.УстановитьСтроку();

		Процесс = СоздатьПроцесс(СтрокаЗапуска, "./", Истина, Истина);
		Процесс.Запустить();
		Процесс.ОжидатьЗавершения();
		ЗаписьXML.ЗаписатьБезОбработки(Процесс.ПотокВывода.Прочитать());
		РезультатРаботыПроцесса = ЗаписьXML.Закрыть();
		Сообщить(РезультатРаботыПроцесса);

		РезультатСообщение = ПрочитатьФайлИнформации(Конфигуратор.ФайлИнформации());
		Если НЕ (СтрНайти(РезультатСообщение, "успешно завершено") > 0 ИЛИ СтрНайти(РезультатСообщение, "completed successfully") > 0) Тогда
			ВызватьИсключение "Результат работы не успешен: " + Символы.ПС + РезультатСообщение; 
		КонецЕсли;

		Попытка
			УдалитьФайлы(Конфигуратор.ФайлИнформации());
		Исключение
		КонецПопытки;

		Параметры = Аргументы.ЗначенияПараметров;

КонецПроцедуры

Функция ПрочитатьФайлИнформации(Знач ПутьКФайлу)

	Текст = "";
	Файл = Новый Файл(ПутьКФайлу);
	Если Файл.Существует() Тогда
		Чтение = Новый ЧтениеТекста(Файл.ПолноеИмя);
		Текст = Чтение.Прочитать();
		Чтение.Закрыть();
	Иначе
		Текст = "Информации об ошибке нет";
	КонецЕсли;

	Лог.Отладка("файл информации:
	|"+Текст);
	Возврат Текст;

КонецФункции


Функция ЗначениеПоУмолчанию(value, defValue="")
	res = ?( ЗначениеЗаполнено(value), value, defValue);
	Возврат res;
КонецФункции

Функция ЗапуститьИПодождать(СтрокаЗапуска)
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();

	Процесс = СоздатьПроцесс(СтрокаЗапуска, "./", Истина, Истина);
	Попытка
		Процесс.Запустить();
	Исключение
		Если ЭтоWindows Тогда
			ШаблонЗапуска = "cmd /c %1";
		Иначе
			ШаблонЗапуска = "sh -c '%1'";
		КонецЕсли;
		Процесс = СоздатьПроцесс(СтрШаблон(ШаблонЗапуска, СтрокаЗапуска), "./", Истина, Истина);
		Процесс.Запустить();
	КонецПопытки;
	ПериодОпросаВМиллисекундах = 1000;
	Если ПериодОпросаВМиллисекундах <> 0 Тогда
		Приостановить(ПериодОпросаВМиллисекундах);
	КонецЕсли;
	Пока НЕ Процесс.Завершен ИЛИ Процесс.ПотокВывода.ЕстьДанные ИЛИ Процесс.ПотокОшибок.ЕстьДанные Цикл
		//Сообщить(""+ ТекущаяДата() + " Завершен:"+Строка(Процесс.Завершен) + Строка(Процесс.ПотокВывода.ЕстьДанные) + Строка(Процесс.ПотокОшибок.ЕстьДанные) );
		Если ПериодОпросаВМиллисекундах <> 0 Тогда
			Приостановить(ПериодОпросаВМиллисекундах);
		КонецЕсли;

		ОчереднаяСтрокаВывода = Процесс.ПотокВывода.Прочитать();
		ОчереднаяСтрокаОшибок = Процесс.ПотокОшибок.Прочитать();

		Если Не ПустаяСтрока(ОчереднаяСтрокаВывода) Тогда
			ОчереднаяСтрокаВывода = СтрЗаменить(ОчереднаяСтрокаВывода, Символы.ВК, "");
			Если ОчереднаяСтрокаВывода <> "" Тогда
				Лог.Информация("%2%1", ОчереднаяСтрокаВывода, Символы.ПС);
				ЗаписьXML.ЗаписатьБезОбработки(ОчереднаяСтрокаВывода);
			КонецЕсли;
		КонецЕсли;

		Если Не ПустаяСтрока(ОчереднаяСтрокаОшибок) Тогда
			ОчереднаяСтрокаОшибок = СтрЗаменить(ОчереднаяСтрокаОшибок, Символы.ВК, "");
			Если ОчереднаяСтрокаОшибок <> "" Тогда
				//Сообщить(ОчереднаяСтрокаОшибок);
				Лог.Информация("%2%1", ОчереднаяСтрокаОшибок, Символы.ПС);
				ЗаписьXML.ЗаписатьБезОбработки(ОчереднаяСтрокаОшибок);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	ОчереднаяСтрока = СтрЗаменить(Процесс.ПотокВывода.Прочитать(), Символы.ВК, "");
	Лог.Информация("%2%1", ОчереднаяСтрока, Символы.ПС);
	ЗаписьXML.ЗаписатьБезОбработки(ОчереднаяСтрока);
	РезультатРаботыПроцесса = ЗаписьXML.Закрыть();

	Возврат Новый Структура("КодВозврата, Результат", Процесс.КодВозврата, РезультатРаботыПроцесса);

КонецФункции // ЗапуститьИПодождать(СтрокаЗапуска)

Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт

	Возврат СтрШаблон("%1: %2 - %3", ТекущаяДата(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);

КонецФункции

ИнициализацияОкружения();